#!/bin/bash
#Author:Mario Franco-Munoz
#Script Name: matrix (assignment 1; CS344)
#Due Date: 4/23/2018

#temp file

TMP=TMP$$

#trap for delting files upon exit
#source/reference:
# https://stackoverflow.com/questions/687014/removing-created-temp-files-in-unexpected-bash-exit
trap "rm -f $TMP*" EXIT
#trap "rm -f $TMP*; exit 1" INT HUP TERM

#function: dims
#description: displays the dimensions of the input matrix "rows columns"
#input: file containing space delimited columns
#output: dimensions of input matrix "rows columns"
#source/reference:
#https://stackoverflow.com/questions/8629330/unix-count-of-columns-in-file
dims() {
	

	#create temporary file and load in contents of argument to temp file
	inputFile="20TMP$$"
	cat $1 >$inputFile
	
	#prints the dimensions of the array using wc (word count) and head
	read -r line < $inputFile
	printf "`wc -l < $inputFile` `head -1 $inputFile | tr '|' ' ' | wc -w`\n"
	rm -f "$inputFile"
}

#function: transpose
#description: reflects the elements along the diagonal
#input: M x N matrix in space delimited format M = rows, N = cols
#output: display (in I/O) inverted matrix. contents of input file changed to inverted matrix
#source/reference: Ryan Gambord's contributions to slack were key to understanding this problem
#cut portion in particular.
transpose() {

	inputFile2="10TMP$$"
	cat $1 >$inputFile2
	
	#use "head -n 1" to parse each line by line 
	row=$(head -n 1 $inputFile2 | wc -w)
	
	#cut and paste values from row to column using paste -s to tab delimit	 
	for i in $(seq 1 $row)
	do
		cut -f"$i" $inputFile2 | paste -s
	done
	
	rm -f "$inputFile2"

}

#function: mean
#description: takes an M x N matrix and returns a 1 x N row vector, where first element is the
# mean of column one, the second is the mean of column two etc.
#input:M x N matrix in space delimted format M = rows, N = cols
#output: 1 x N matrix with the average of each column
mean() {
	
	inputFile3="TMP$$"
	intermed="intermed$$"
	tempOutput="tmpOut$$"
	finalOutput="finOut$$"
	#cat $1 >"$inputFile3"

	transpose $1 > "$intermed"

	chmod u+rwx $intermed
	touch $tempOutput
	chmod u+rwx $tempOutput	

	echo $intermed | while read line
	
	do
	sum=0
	count=0
	avg=0
	abs=0
		for i in $line
		do
			sum=$((sum + i))
			count=$((count += 1))
		
		done

		#check to see if sum was negative	
		if [ "$sum" -lt 0 ]
		then
			abs=0
		else
			abs=1
		fi

		#calculate and  rounded average (as per assignment notes)
		avg=$(( (sum + (count / 2) * (abs * 2 - 1)) / count))
		
		echo "$avg" >> "$tempOutput"
 				

	done < $intermed
	
		
	#transpose results via temporary  placeholder file
	#so we don't have to deal with that annoying trailing \t character
	transpose "$tempOutput" > "$finalOutput"
	cat "$finalOutput"
	
	#remove temporary files
	rm -f "$tempOutput"
	rm -f "$finalOutput"		
	rm -f "$intermed"
}

#function: add
#description: adds two matrices if their dimensions match
#input:two files containing matricies of the same dimensions
#output:single matrix that is the sum of the two input matricies
add() {
	sumOut="specialTMP$$"
	temp="1TMP$$"
	left="4TMP$$"
	right="5TMP$$"

	#get the dimensions using dims
	tempCheck1="$(dims $1)"
	tempCheck2="$(dims $2)"

	#split the results from dims into separate variables
	rowsA=$(cut -d " " -f1 <<< "$tempCheck1")
	rowsB=$(cut -d " " -f1 <<< "$tempCheck2")
	colsA=$(cut -d " " -f2 <<< "$tempCheck1")
	colsB=$(cut -d " " -f2 <<< "$tempCheck2")		


	#check to see if input matricies were valid
	errorMessage3=("Input matricies are not of the same dimensions.")
	if [[ $rowsA > $rowsB ]] || [[ $colsA > $colsB ]] || [[ $rowsA < $rowsB ]] || [[ $colsA < $colsB ]]
	then
		echo $errorMessage3 >&2
		exit 1
	fi  

	#add matrix A and B
	rowTracker=0
	sum=0
	for ((k=1; k<=$rowsA; k++))
	do
		#rowTracker=$((rowTracker + 1))
		for ((i=1; i<=$colsA; i++))
		do
			#strip off the columns
			cut -f"$i" "$1" > "$left"
			cut -f"$i" "$2" > "$right"

			#strip down to the individual number
			head -n"$k" $left > "$temp"
			A=$(tail -n 1 $temp)
				
			head -n"$k" $right > "$temp"
			B=$(tail -n 1 $temp)
			
			#add summed value to output matrix
			sum=$((A + B))
			echo -ne "$sum" >> "$sumOut"
			
			
			#check if adding a tab character is applicable: this doesn't work in the auto grader using [[]]: no clue why
			if [ $i -ne $colsA ]
			then
				echo -ne "\t" >> "$sumOut"
			fi
		done
	
		#append newline character
		echo "" >> "$sumOut"
	done
	
	cat "$sumOut"

	#rm -f "$sumOut"
	rm -f "$tempCheck1"
	rm -f "$tempCheck2"
	rm -f "$left"
	rm -f "$right"
	rm -f "$temp"
}


#function: multiply
#description: adds two matrices if the deminsions are compatible
#input: two files containg matricies of the correct dimensions M x N, N x A
#output: single matrix that is the product of the two input matricies
multiply() {
	prodOut="prodTMP$$"
	temp="TMP$$99"	
	transB="TMP$$98"
	left="TMP$$96"
	right="TMP$$97"	

	#get the dimensions using dims
	dimsCheck1="$(dims $1)"
	dimsCheck2="$(dims $2)"

	#split the results from dims into separate variables
	rowsA=$(cut -d " " -f1 <<< "$dimsCheck1")
	rowsB=$(cut -d " " -f1 <<< "$dimsCheck2")
	colsA=$(cut -d " " -f2 <<< "$dimsCheck1")
	colsB=$(cut -d " " -f2 <<< "$dimsCheck2")

	#validate: make sure that the number ofcolumns in matrix A match the number of columns in matrix B
	errorMessage4=("Number of columns in matrix A do not match number of rows in matrix B")
	if [ $colsA -ne $rowsB ]
	then
		echo $errorMessage4 >&2
		exit 1
	fi

	#transpose $2 > $transB
	
	#multiply matrix A and B
	innerSum=0
	prod=0
	colStrip=0
	rowStrip=0
	echo $rowsA
	echo $rowsB	

	for ((i=1; i<=$rowsA; i++))
	do
		for((k=1; k<=$colsB; k++))
		do
		innerSum=0
			for((j=1; j<=$colsA; j++))
			do
				#get first number: strip off the column of matrix A
				cut -f"$j" "$1" > "$left"
				
				#strip down to the individual number(matrix A row: i)
				head -n"$i" "$left" > "$temp"
				A=$(tail -n 1 $temp)
				

								
				#get get second number:(matrix B col: k)
				cut -f"$k" "$2" > "$right"

				#strip down to the individual number
				head -n"$j" "$right" > "$temp"
				B=$(tail -n 1 $temp)						
				
				
				prod=$((A * B))

			
				innerSum=$((innerSum + prod))

			done

			echo -ne $innerSum >> $prodOut

			if [ $k -ne $colsB ]
			then
				echo -ne "\t" >> "$prodOut"
			fi
		done
		
		#add the new line
		echo "" >> "$prodOut"

	done

	cat $prodOut

	rm -f "$prodOut"
}


#error messages
errorMessage1=("Incorrect number of arguments")
errorMessage2=("Bad command")


#"MAIN" SECTION


#run dims
if [[ $1 == "dims" ]] #&& [[ "$#" == "1" ]] 
then
	if [[ "$#" > "2" ]] || [[ "$#" < "1" ]]	
	then
		echo $errorMessage1 >&2
		exit 1
	fi
	dims "$2"
#run transpose
elif [[ $1 == "transpose" ]]
then
	transpose "$2"

#run mean
elif [[ $1 == "mean" ]]
then
	mean "$2"

#run add
elif [[ $1 == "add" ]]
then
	if [[ "$#" > 3 ]] || [[ "$#" < 3 ]]
	then
		echo $errorMessage1 >&2
		exit 1
	fi
	add "$2" "$3"
#run multiply
elif [[ $1 == "multiply" ]]
then
	if [[ "$#" > 3 ]] || [[ "$#" < 3 ]]
	then
		echo $errorMessage1 >&2
		exit 1
	fi
	multiply "$2" "$3"

else
	echo "$errorMessage2">&2
	exit 1	
fi




